// React
import { useEffect, useState } from "react";

// Next
import Head from "next/head";
import type {
  InferGetServerSidePropsType,
  GetServerSideProps,
  NextApiRequest,
  NextApiResponse,
} from "next";

// Mantine
import {
  IconCircleX,
  IconDiscountCheckFilled,
  IconLoader,
} from "@tabler/icons-react";

// Trpc
import { api } from "@/utils/api";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { createTRPCContext } from "@/server/api/trpc";
import { appRouter } from "@/server/api/root";
import superjson from "superjson";

// Components
import Header from "@/components/Header";
import MaxWidthWrapper from "@/components/MaxWidthWrapper";
import PlayerCounter from "@/components/PlayerCounter";
import AveragePing from "@/components/AveragePing";
import RestartPlan from "@/components/RestartPlan";

type ConfigProps = {
  serverName: string | undefined;
  cfxId: string | undefined;
  websiteLink: string | undefined;
  discordLink: string | undefined;
};

export const getServerSideProps = (async (ctx) => {
  await new Promise((resolve) => setTimeout(resolve, 100));

  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: createTRPCContext({
      req: ctx.req as NextApiRequest,
      res: ctx.res as NextApiResponse,
    }),
    transformer: superjson, // optional - adds superjson serialization
  });

  await ssg.fivem.status.prefetch();

  return {
    props: {
      trpcState: ssg.dehydrate(),
      config: {
        serverName: process.env.SERVER_NAME,
        cfxId: process.env.CFX_ID,
        websiteLink: process.env.WEBSITE_LINK,
        discordLink: process.env.DISCORD_LINK,
      },
    },
  };
}) satisfies GetServerSideProps<{
  config: ConfigProps;
}>;

export default function Home(
  props: InferGetServerSidePropsType<typeof getServerSideProps>,
) {
  const serverName = props.config.serverName ?? "FiveM Server";
  const cfxId = props.config.cfxId ?? "cfx.re/join/123abc";
  const { websiteLink, discordLink } = props.config;

  const { data, isLoading, isError, isRefetching } = api.fivem.status.useQuery(
    undefined,
    {
      refetchIntervalInBackground: true,
      refetchInterval: 60000,
    },
  );

  const [lastFetch, setLastFetch] = useState<string>("");

  useEffect(() => {
    if (!isRefetching) {
      const formattedDate = Intl.DateTimeFormat("da-DK", {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
      }).format(new Date());

      setLastFetch(formattedDate);
    }
  }, [isRefetching]);

  return (
    <>
      <Head>
        <title>{serverName}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="h-screen w-full bg-[#141517]/[80%]">
        <Header
          title={serverName}
          cfxId={cfxId}
          website={websiteLink}
          discord={discordLink}
        />
        <MaxWidthWrapper>
          <div className="flex flex-col py-20">
            <div className="mb-10 flex items-center justify-between">
              <div className="flex flex-col">
                <div className="flex gap-2">
                  {isLoading ? (
                    <IconLoader className="text-white" size={30} />
                  ) : !data?.status ? (
                    <IconDiscountCheckFilled
                      className="mt-0.5 text-[#47aafc]"
                      size={32}
                    />
                  ) : (
                    <IconCircleX className="mt-0.5 text-[#ff4d4f]" size={32} />
                  )}
                  <h1 className="text-3xl font-bold text-white">
                    Server Status
                  </h1>
                </div>
              </div>
              <span className="text-lg font-semibold text-white">
                {lastFetch ? `Senest opdateret d. ${lastFetch}` : "Indl√¶ser..."}
              </span>
            </div>
            <div className="flex gap-10">
              <div className="flex w-full flex-col gap-10">
                <div className="flex gap-10">
                  <PlayerCounter
                    isError={isError}
                    isLoading={isLoading}
                    players={data?.players}
                    maxPlayers={data?.maxPlayers}
                    status={data?.status}
                  />
                  <AveragePing
                    isError={isError}
                    isLoading={isLoading}
                    ping={data?.ping}
                    status={data?.status}
                  />
                </div>
                <RestartPlan
                  isError={isError}
                  isLoading={isLoading}
                  restartPlan={data?.restartPlan}
                  status={data?.status}
                />
              </div>
            </div>
          </div>
        </MaxWidthWrapper>
      </div>
    </>
  );
}
